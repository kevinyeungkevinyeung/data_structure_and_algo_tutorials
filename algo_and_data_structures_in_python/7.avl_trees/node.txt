
### Balanced Binary Search Trees or AVL Trees
    it is a balanced data structure invented back in 1962 by Adelson-Velsky and Landis (AVL)

    this data structure has a guaranteed O(logN) running time

    the running time of binary search trees depends on the h height of the binary search tree

    in an AVL tree the heights of the two child subtrees of any node differ by at most one

    AVL trees are faster than red-black trees becauses they are more rigidly balanced but needs more work

    operating systems relies heavily on these data structures

    all the operations are the same as we have seen with binary search trees (insertion and removal)

    after every insertion and removal operations we have to check whether the tree has become imbalanced or not

    if the tree is imbalanced then we have to make rotations

### height  
    
    height = max(left child's height, right child's height) + 1

    the height of a node is the longest path from the actual node to a leaf node

    the height of a NULL node is -1 to be consistent (this is why leaf nodes have height 0)

    if the difference between the heightn value of left and right node is small than it's balanced

    AVL trees are exactly the same as binary search trees

    the only difference is that we track the h height parameters of the nodes in the tree
        | h(left) - h(right) | > 1

        all subtrees height parameter can not differ more than 1 (otherwise the tree is imbalanced)
        
        balance factor
            h(left) - h(right)

            postive means left heavy

            negative means right heavy

    we have to update the binary search tree and make rotations if it gets imbalanced

    this is why we have the h height parameters - we just have to check the differences in height parameters after every operations

### Rotations
    we have to track the h height prarmeters for all the nodes in the binary search tree

    we can calculate the balance factors for the nodes

    have to make rotations if necessary to rebalance search trees

    1. left rotations
        negative balance factors means right heavy situation so we have to make a left rotation to rebalance the tree

        move the root node to the left child of the root node

    2. right rotations
        Positive blance factors means left heavy situation so we have to make a right rotation to rebalance the tree

        move the root node to the right child of the root node

    we have to update the references for several nodes in O(1) running time

    the binary serach tree properties remains the same (parent-child relationships)

    the in-order traversal is the same after rotation (extremely crucial)

    rotations are extremely fast - we just have to update the references in O(1) constant running time

    this operation does not change the properites of the tree

    the in-order traversal remains the same as well as the parent-child relationships in the tree

    there may be other issues because of rotations

    we have to check up to root node whether to make further rotations or not - it takes O(logN) running time


### application
    Game Engines
        almost all the game engines use binary search tres to determine which objects should be rendered in the game world

    Compliers
        it is crucial in programming languages to be able to parse syntax expressions (loops or statments)

        This is why compilers use a sepcial binary search tree the so-called syntax tree

    sorting
        AVL we can use balanced tree data strcutures to sort items efficiently in O(NlogN) linearithmic running time complexity

        we have to insert the N itmes into an AVL tree

        then we just have to make a simple in-order traversal in O(N) linear running time

        final running time is O(NlogN) + O(N) = O(NlogN)

    Database
        We can construct database with a AVL tree - usually when we have to make lot of look-ups (search operations)

        if deletions and insertions are frequent then AVL tree is not the best option possible because of the huge number of rotations

        trees support quite a lot operations (huge advantage)

        red-black trees and B-Trees are more popular
 
    