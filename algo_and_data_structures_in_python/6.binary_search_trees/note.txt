
### Binary Search Trees

    The main problem with arrays and linked lists is that finding an arbitrary item takes O(N) linear running time!!!

    If we store the items in a sorted order - then we can achieve O(logN) running time !!


### Trees (Graph Theory)
    we have acces to the root node exlusively all other nodes can be acces via the root node

    There are so-called leaf nodes with no children at all

    A tree is a G(V,E) undirected graph in which any two vertice are connected by exactly one path or equivalently a connected
    acyclic undirected graph
        the nodes are not connected horizotally 

### Binary Search Trees
    every node in the tree can have at most 2 children (left child and right child)

    left child is smaller than the parent node

    right child is greater than the parent node

    we can access the root node exlusively and all other nodes can be accessed via root node

    every decision can get rid of half of the data (like with binary search) and this is how we can achieve
    O(logN) running time

    The height of a tree is the number of edges on the longest downward path between the root and a leaf node. THe number of laters the tree contains.

    layer 1 with 2^0 nodes
    layer 2 with 2^1 nodes
    layer h with 2^(h-1) nodes

    how many N nodes are there in a complete binary search tree with h height?
        2^(h-1) = N
        log2^(h-1) = logN
        h = logN + 1
        h = O(logN)
        
    The logarithmic O(logN) running time is valid only when the tree strucuture is balaned

    we should keep the height of a tree at a minimum which is h=logN

    the tree structure may became imbalanced which means the number of nodes significantly differ in the subtress

    if the tree is imbalanced so the h=logN relation is no more valid then the operations' running time is no more O(logN) logarithmic

    Imbalanced tree
        in an imbalanced tree the running of oerations can be reduced to even O(N) linear running time complexity

    Balanced Trees  
        in a balanced tree the running time of operations are O(logN) always

### Theory - search and insert 

    insert (12)

    root node = 12

    insert (4) => check if 4 larger or smaller than 12
        4 go to the left

    insert (8) => check if 8 is greater or smaller than 12, then compare 8 to 4
        since 8 is greater than 4, it will become right child of 4

    insert (20) => check if 20 is greater or smaller than 12
        since 20 is greater than 12, it goes to the right child node of 12

    insert (27) => 27 is greater than 12 so go right child, and 27 is greater than 20
        so it becomes the right child of 20

    insert (16) => 16 is greater than 20, so go right. 16 is less than 20,
        so it becomes the left child of 20

    insert (1) => 1 is less than 12 go left, and 1 is less than 4
        so it becomes the left child of 4

    The maximum item in the binary search tree is the rightmost item in the tree

    The minimum item in the binary search tree is the leftmost item in the tree

### Theory - Delete

    1. removing a leaf node
        basically we just have to notify the parent that the child has been removed

        the node will be removed by the garbage collector

    2. removing a node with a single child
        basically we just have to notify the parent that the left (or right) child has been changed

    3. removing a node with two children
        the smallest item in the right subree is called the successor

        the largest item in the left subtree is called the predecessor

        mathematical reduction
            find the predecessor and swap with the root node, and remove the root node

### Theory - in-order traversal

    Tree traversal means visting every node of the binary search tree exactly once in O(N) linear running time

    1. pre-order traversal
        we visit the root node of the binary tree then the left subtree and finally the right subree in a recursive manner
        
    2. in-order traversal
        we visit the left subtree of the binary tree then the root node and finally the right subtree in a recursive manner


    3. post-order traversal
        we visit the left subtree of the binary tree then the root node and finally the right subtree in a recursive manner

### Pros and Cons of binary tree
    Pros  
        Fast operations
            all the operations have O(logN) logarithmic running time (average-case)

        Predictable
            because all the operations shares the same running time

    Cons
        The tree may become imbalanced
            the tree can become imbalanced depending on the order in which we insert the items

        No random access
            there are no indexes - we can access the first node (head node) exlusively

        No O(1) operations
            there are no oeprations with O(1) constant running time complexity

### Tree applications
    Operations system uses almost all the important data structures. Let's talk about the real world applications of tree:
        1. Tree are extremely powerful if we want to represent hierarchical data (file system)

            operating systems
            game tree
            machine learning (classification tree)

